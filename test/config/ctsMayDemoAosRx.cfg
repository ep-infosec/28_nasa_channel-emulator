# =================================================================
# File: ctsMayDemoAosRx.cfg
# Author: Tad Kollar ()
# $Rev: 1069 $
# $Date: 2010-05-07 09:37:44 -0400 (Fri, 07 May 2010) $
#
# Description:
#  Creates a single, receiving AOS virtual channel by:
#  1. Receiving input on one Ethernet interface.
#  2. Removing the Ethernet frames, then the AOS Transfer Frames.
#  3. Extracting and recombining Encapsulation Packets from M_PDUs.
#  4. Removing Encapsulation Packet headers, leaving UDP datagrams.
#  5. Encapsulating datagrams into Ethernet frames.
#  6. sending out another Ethernet interface.
#
# This is accomplished with eight modular segments in one channel.
#
# CUSTOMIZATIONS REQUIRED (may not even run otherwise):
# - Two ethernet interface names (each in 3 places); also check
#   the protectedDevices line.
# - srcMac and dstMac in ethAdd section.
# =================================================================

# =================================================================
# SERVER SECTION
#
# Information applicable either to the administrative
# threads or globablly to all modules.
# =================================================================
Server: 
{
  # debugLevel:
  # 8: (Debug) Very verbose. Will describe every call, every event,
  #    and every data unit that every module handles. Must be
  #    enabled at compile time with -DDEFINE_DEBUG=1 or it will be
  #    no more verbose than 7.
  # 7: (Informative) Describes significant events in addition to
  #     notices, warnings, and errors. Fine for most usage.
  # 6: (Notices) Allows only notices (describe that something
  #    unusual has happened but wasn't necessarily bad) and higher.
  # 5: (Warnings) Allows only warnings (something bad happened but
  #    not fatal) and higher.
  # 4: (Errors) Displays only errors (something bad happened that 
  #    may have result in a loss of functionality) and higher.
  # 0-3: Any one of these effectively disables all output because
  #    messages of higher level than "error" are not used.
  debugLevel = 7;

  # logFile: Path/file to dump output to.
  logFile = "/var/log/ce_admind.log";

  # foreground: true prevents the process from daemonizing and
  # output to the terminal; false causes it to fork into the
  # background and log to the configured file.
  foreground = false;

  # dllPath: The location of the CE modules (modXYZ.so files)
  dllPath = "/usr/lib/ctsce-modules";

  # abyss section: Describes the Abyss++ HTTP server.
  # NOTE: Abyss++ will be replaced in the near future and
  # this section will be ignored.
  HTTP : 
  {
    documentRoot = "/var/lib/CE/www";
    xmlrpcPath = "/RPC2";
    port = 8080; # TCP port to listen on for XML-RPC requests
  };
};

# =================================================================
# DEVICES SECTION
#
# A device in the CE context is an I/O endpoint. Individual
# devices are described here as well as common settings.
#
# Any name changes here must be reflected in the Channels section
# below or the CE will fail to start!
# =================================================================
Devices:
{
  # autoLoad: Which devices to activate at start time. Each MUST
  # have its own description section below.
  autoLoad = [ "eth1", "eth2", "grc0" ];

  EthernetDevice_Common : 
  {
    # protectedDevices: No modification operations are allowed on these devices.
    # Normally includes the administrative Ethernet interface (the one a
    # user needs to SSH into the box, and also receives XML-RPC requests),
    # plus any other device that should not be used for emulation.
    protectedDevices = [ "eth0" ];
  };

  eth1 : 
  {
    devType = "Ethernet"; # Must be "Ethernet" or the wrong type of object will be created.
    flagPromisc = false; # If true, collects frames with arbitrary destinations.
    flagNoARP = true; # If true, surpresses ARP requests.
  };
  
  eth2 : 
  {
    devType = "Ethernet"; # Must be "Ethernet" or the wrong type of object will be created.
    flagPromisc = false; # If true, collects frames with arbitrary destinations.
    flagNoARP = true; # If true, surpresses ARP requests.
  };

  grc0 : 
  {
    devType = "Ethernet"; # Must be "Ethernet" or the wrong type of object will be created.
    flagPromisc = true; # If true, collects frames with arbitrary destinations.
    flagNoARP = true; # If true, surpresses ARP requests.
  };
};

# =================================================================
# CHANNELS SECTION
#
# A "channel" to the CE is really only a namespace to group
# modular segments into. A channel can have an arbitrary number
# of inputs and outputs (at least one of each is required to
# function).
#
# There may be settings global to each channel, but that is
# mostly determined by the modules, with "segments" being the
# one exception.
#
# A "segment" here is an instance of an object provided by
# module. Segments typically have one primary input and one primary
# output, Mux/demux segments have an arbitrary number of one or the
# other. Some segments also support exactly one aux input and/or
# output, typically used to receive/send data from/to outside the
# primary data stream.
# =================================================================
# COMMON SEGMENT OPTIONS
#
# Not all options are used by all modules. Specialized options are
# described within their sections, below.
#
# dllName: The DLL to load (minus the .so suffix), before continuing.
#
# deviceName: An associated device, must be in the Devices section
#             (only used by Receive/Transmit-type module segments).
#
# highWaterMark: Number of bytes the message queue may contain before
#                blocking new data. This is the primary control used
#                to prevent excessive memory allocation.
#
# lowWaterMark: After hitting the highWaterMark, the number of bytes
#               the message queue must shrink to before accepting
#               data again. Can be the same as highWaterMark if desired.
#
# primaryOutput: A two-item array describing where to send the
#                modified data. 
#                First item: target segment name
#                Second item: "PrimaryInput" or "AuxInput"
#                AuxInput is rare, but necessary for certain modules.
#
# immediateStart: If true, activate the module immediately (start
#                 reading/writing/accepting/processing data).
#
# MTU: The maximum number of bytes that a segment will transmit.
#      Some modules must override this with a derived value.
#
# MRU: The maximum number of bytes that a segment can receive.
#      Some modules must override this with a derived value.
# =================================================================
Channels:
{
  # autoAdd: A list of channels to automatically initialize.
  autoAdd = [ "chAosRx" ];

  chAosRx: # channel name
  {
    # segments: A list of segments to insert into the channel.
    #
    # ORDER IN THIS LIST IS CRITICAL!
    #
    # Segments are inserted in the order specified here,
    # typically the *reverse* of the direction of traffic flow -
    # transmitting segments should be specified first, so that
    # segments farther upstream can specify them as output
    # targets. Further, it would be unwise to begin receiving
    # data before the entire channel is defined.
    # 
    # The segment *sections* below do not have to be in order
    # (though it improves readability) - just this list.
    segments = [ "ethTx1", "ethAdd1", "encapDel1", "mpduDel1", "vcRcv1",
    			 "ethTx2", "ethAdd2", "encapDel2", "mpduDel2", "vcRcv2",
    			 "vcDemux", "afRcv", "ethDel", "ethRx" ];

    # AOS_PhysicalChannel Section: All AOS-related segments in this
    # channel refer to this section for values that apply to the
    # entire Physical Channel.
    AOS_PhysicalChannel:
    {
      # The size of every AOS Transfer Frame in octets.
      frameSize = 250;

      # Whether to perform/reserve space for error control in the
      # header (EC is not developed yet but the space will be
      # reserved.
      useHeaderErrorControl = false;

      # Whether to perform/reserve space for error control for
      # the entire frame.
      useFrameErrorControl = true;

      # Whether to use/save space for the Insert Zone.
      useInsertZone = false;

      # The length of the Insert Zone in bytes.
      insertZoneSize = 0;

      # Whether to use the Pink Sheets draft of the AOS
      # recommendation (includes FSH, MC Insert Zone, MC_OCF).
      useDraftRecommendation = false;
    };

    ethTx1: # segment name
    {
      dllName = "modEthTransmitter";
      deviceName = "eth1";
      highWaterMark = 16777216;
      lowWaterMark = 12582912;
      immediateStart = true;

      # ETHERNET LINK CHECKING
      # When an interface is first activated, data can be written
      # to it before it can send, potentially resulting in
      # thousands of lost frames. That can be disasterous in
      # some scenarioes. The linkCheck options govern the ability
      # to detect a link before writing data. If a cable is
      # actually unplugged or it otherwise takes a long while to 
      # detect the link, message queues will fill up and block.
      #
      # linkCheckFreq: "Never", "Once" or "Always"
      # Never: Do not bother testing for a carrier.
      # Once: Only check when the segment is first activated.
      # Always: Check before sending every frame.
      linkCheckFreq = "Once";
      #
      # linkCheckMaxIterations: The number of tests to perform
      # before giving up.
      linkCheckMaxIterations = 1000;
      #
      # linkCheckSleepMsec: Number of milliseconds to sleep
      # after each failed test iteration.
      linkCheckSleepMsec = 5;
    };

    ethAdd1: { # segment name
      dllName = "modEthFrame_Add";
      highWaterMark = 16777216;
      lowWaterMark = 12582912;
      primaryOutput = [ "ethTx1", "PrimaryInput" ];
      immediateStart = true;

      # dstMAC: MAC address of the interface on the destination host.
      # Must be specified correctly if that interface is not
      # operating in promiscuous mode. If left unspecified, a random
      # sequence will be generated.
      dstMAC = "00:30:48:57:6c:31";

      # srcMAC: Address of the outgoing interface on this host. Not
      # particularly important to get right unless a two-way TCP
      # connection is intended or MAC filtering is in place along
      # the path.
      srcMAC = "00:04:23:b6:58:a3";
    };
 
    encapDel1: { # segment name
      dllName = "modEncapPkt_Remove";
      highWaterMark = 16777216;
      lowWaterMark = 12582912;
      primaryOutput = [ "ethAdd1", "PrimaryInput" ];
      immediateStart = true;
    };

    mpduDel1: { # segment name
      dllName = "modAOS_M_PDU_Remove";
      highWaterMark = 16777216;
      lowWaterMark = 12582912;
      primaryOutput = [ "encapDel1", "PrimaryInput" ];
      immediateStart = true;
    };

    vcRcv1: { # segment name
      dllName = "modAOS_VC_Rcv";
      highWaterMark = 16777216;
      lowWaterMark = 12582912;
      primaryOutput = [ "mpduDel1", "PrimaryInput" ];
      immediateStart = true;

      # The spacecraft identifer (forms the master channel ID).
      SCID = 0x99;

      # The virtual channel identifier.
      VCID = 0x1;

      # The type of packet to expect, either "Multiplexing" or "Bitstream".
      serviceType = "Multiplexing";

      # If error control is enabled, whether it should be performed here.
      # (technically it should only be done in the All Frames service).
      performErrorControlHere = false;

      # Whether to allocate space for and use the OCF.
      useOperationalControl = false;

      # Whether to count the number of times the frame counter flips.
      useVCFrameCycle = false;

      # Whether to use the frame secondary header (pink sheets only).
      useFSH = false;

      # The size of the FSH in octets, if it is fixed.
      fshFixedSize = 0;
    };
    
    
    ethTx2: # segment name
    {
      dllName = "modEthTransmitter";
      deviceName = "eth2";
      highWaterMark = 16777216;
      lowWaterMark = 12582912;
      immediateStart = true;

      # ETHERNET LINK CHECKING
      # When an interface is first activated, data can be written
      # to it before it can send, potentially resulting in
      # thousands of lost frames. That can be disasterous in
      # some scenarioes. The linkCheck options govern the ability
      # to detect a link before writing data. If a cable is
      # actually unplugged or it otherwise takes a long while to 
      # detect the link, message queues will fill up and block.
      #
      # linkCheckFreq: "Never", "Once" or "Always"
      # Never: Do not bother testing for a carrier.
      # Once: Only check when the segment is first activated.
      # Always: Check before sending every frame.
      linkCheckFreq = "Once";
      #
      # linkCheckMaxIterations: The number of tests to perform
      # before giving up.
      linkCheckMaxIterations = 1000;
      #
      # linkCheckSleepMsec: Number of milliseconds to sleep
      # after each failed test iteration.
      linkCheckSleepMsec = 5;
    };

    ethAdd2: { # segment name
      dllName = "modEthFrame_Add";
      highWaterMark = 16777216;
      lowWaterMark = 12582912;
      primaryOutput = [ "ethTx2", "PrimaryInput" ];
      immediateStart = true;

      # dstMAC: MAC address of the interface on the destination host.
      # Must be specified correctly if that interface is not
      # operating in promiscuous mode. If left unspecified, a random
      # sequence will be generated.
      dstMAC = "00:30:48:57:6c:33";

      # srcMAC: Address of the outgoing interface on this host. Not
      # particularly important to get right unless a two-way TCP
      # connection is intended or MAC filtering is in place along
      # the path.
      srcMAC = "00:04:23:b6:5c:d6";
    };
 
    encapDel2: { # segment name
      dllName = "modEncapPkt_Remove";
      highWaterMark = 16777216;
      lowWaterMark = 12582912;
      primaryOutput = [ "ethAdd2", "PrimaryInput" ];
      immediateStart = true;
    };

    mpduDel2: { # segment name
      dllName = "modAOS_M_PDU_Remove";
      highWaterMark = 16777216;
      lowWaterMark = 12582912;
      primaryOutput = [ "encapDel2", "PrimaryInput" ];
      immediateStart = true;
    };

    vcRcv2: { # segment name
      dllName = "modAOS_VC_Rcv";
      highWaterMark = 16777216;
      lowWaterMark = 12582912;
      primaryOutput = [ "mpduDel2", "PrimaryInput" ];
      immediateStart = true;

      # The spacecraft identifer (forms the master channel ID).
      SCID = 0x99;

      # The virtual channel identifier.
      VCID = 0x2;

      # The type of packet to expect, either "Multiplexing" or "Bitstream".
      serviceType = "Multiplexing";

      # If error control is enabled, whether it should be performed here.
      # (technically it should only be done in the All Frames service).
      performErrorControlHere = false;

      # Whether to allocate space for and use the OCF.
      useOperationalControl = false;

      # Whether to count the number of times the frame counter flips.
      useVCFrameCycle = false;

      # Whether to use the frame secondary header (pink sheets only).
      useFSH = false;

      # The size of the FSH in octets, if it is fixed.
      fshFixedSize = 0;
    };    
    
    vcDemux: {
      dllName = "modAOS_VC_Demux";
      highWaterMark = 16777216;
      lowWaterMark = 12582912;
      primaryOutputs = ( ( "vcRcv1", "PrimaryInput", 1), ( "vcRcv2", "PrimaryInput", 2) );
      immediateStart = true;
      SCID = 0x99;
    };

    afRcv: { # segment name
      dllName = "modAOS_AF_Rcv";
      highWaterMark = 16777216;
      lowWaterMark = 12582912;
      primaryOutput = [ "vcDemux", "PrimaryInput" ];
      immediateStart = true;

      # If error control is enabled, whether it should be performed here.
      # (technically should always be true).
      performErrorControlHere = true;
    };

    ethDel: { # segment name
      dllName = "modEthFrame_Remove";
      highWaterMark = 16777216;
      lowWaterMark = 12582912;
      primaryOutput = [ "afRcv", "PrimaryInput" ];
      immediateStart = true;
    };

    ethRx: { # segment name
      dllName = "modEthReceiver";
      deviceName = "grc0";
      highWaterMark = 16777216;
      lowWaterMark = 12582912;
      primaryOutput = [ "ethDel", "PrimaryInput" ];
      immediateStart = true;
    };
  };
};
