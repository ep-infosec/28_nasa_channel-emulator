# =================================================================
# File: AOS_single_BPDU_VC_RX_to_file.cfg
# Author: Tad Kollar ()
# $Rev: 1205 $
# $Date: 2011-04-07 13:34:14 -0400 (Thu, 07 Apr 2011) $
#
# Description:
#  Creates a single, receiving AOS virtual channel by:
#  1. Receiving input on one Ethernet interface.
#  2. Removing the Ethernet frames, then the AOS Transfer Frames,
#     then the B_PDU headers.
#  3. Appending the payload to a file.
#
# This is accomplished with X modular segments in one channel.
#
# CUSTOMIZATIONS REQUIRED (may not even run otherwise):
# - One ethernet interface name (in 3 places); also check
#   the protectedDevices line.
# - Output file name in Devices.file0 section.
# =================================================================

# =================================================================
# SERVER SECTION
#
# Information applicable either to the administrative
# threads or globablly to all modules.
# =================================================================
Server: 
{
  # debugLevel:
  # 8: (Debug) Very verbose. Will describe every call, every event,
  #    and every data unit that every module handles. Must be
  #    enabled at compile time with -DDEFINE_DEBUG=1 or it will be
  #    no more verbose than 7.
  # 7: (Informative) Describes significant events in addition to
  #     notices, warnings, and errors. Fine for most usage.
  # 6: (Notices) Allows only notices (describe that something
  #    unusual has happened but wasn't necessarily bad) and higher.
  # 5: (Warnings) Allows only warnings (something bad happened but
  #    not fatal) and higher.
  # 4: (Errors) Displays only errors (something bad happened that 
  #    may have result in a loss of functionality) and higher.
  # 0-3: Any one of these effectively disables all output because
  #    messages of higher level than "error" are not used.
  debugLevel = 7;

  # logFile: Path/file to dump output to.
  logFile = "./logs/ce-server.log";

  # foreground: true prevents the process from daemonizing and
  # output to the terminal; false causes it to fork into the
  # background and log to the configured file.
  foreground = true;

  # dllPath: The location of the CE modules (modXYZ.so files)
  dllPath = "./modules";

  # abyss section: Describes the Abyss++ HTTP server.
  # NOTE: Abyss++ will be replaced in the near future and
  # this section will be ignored.
  abyss : 
  {
    port = 8080; # TCP port to listen on for XML-RPC requests
    logFile = "./logs/ce-abyss.log"; # Where to log connections
  };
};

# =================================================================
# DEVICES SECTION
#
# A device in the CE context is an I/O endpoint. Individual
# devices are described here as well as common settings.
#
# Any name changes here must be reflected in the Channels section
# below or the CE will fail to start!
# =================================================================
Devices:
{
  # autoLoad: Which devices to activate at start time. Each MUST
  # have its own description section below.
  autoLoad = [ "eth2", "file0" ];

  FileDevice_Common : 
  {
    # IOpath: The "root" directory for data files, in lieu of "/".
    # All files manageded by File Devices are under this directory.
    IOpath = "./fileIO";
  };

  EthernetDevice_Common : 
  {
    # protectedDevices: No modification operations are allowed on these devices.
    # Normally includes the administrative Ethernet interface (the one a
    # user needs to SSH into the box, and also receives XML-RPC requests),
    # plus any other device that should not be used for emulation.
    protectedDevices = [ "prv0", "prv1", "grc0", "eth0" ];
  };

  eth2 : 
  {
    devType = "Ethernet"; # Must be "Ethernet" or the wrong type of object will be created.
    snapLen = 1520; # Maximum octets to read at once (if receiving).
    flagPromisc = true; # If true, collects frames with arbitrary destinations.
    flagNoARP = true; # If true, surpresses ARP requests.
  };

  file0 : 
  {
    devType = "File"; # Must be "File" or the wrong type of object will be created.
    fileName = "CE_output.bin"; # Name without path (use FileDevice_Common.IOpath for that).
    isInput = false; # True if the file will read from; false if written to.
  };
};

# =================================================================
# CHANNELS SECTION
#
# A "channel" to the CE is really only a namespace to group
# modular segments into. A channel can have an arbitrary number
# of inputs and outputs (at least one of each is required to
# function).
#
# There may be settings global to each channel, but that is
# mostly determined by the modules, with "segments" being the
# one exception.
#
# A "segment" here is an instance of an object provided by
# module. Segments typically have one primary input and one primary
# output, Mux/demux segments have an arbitrary number of one or the
# other. Some segments also support exactly one aux input and/or
# output, typically used to receive/send data from/to outside the
# primary data stream.
# =================================================================
# COMMON SEGMENT OPTIONS
#
# Not all options are used by all modules. Specialized options are
# described within their sections, below.
#
# dllName: The DLL to load (minus the .so suffix), before continuing.
#
# deviceName: An associated device, must be in the Devices section
#             (only used by Receive/Transmit-type module segments).
#
# highWaterMark: Number of bytes the message queue may contain before
#                blocking new data. This is the primary control used
#                to prevent excessive memory allocation.
#
# lowWaterMark: After hitting the highWaterMark, the number of bytes
#               the message queue must shrink to before accepting
#               data again. Can be the same as highWaterMark if desired.
#
# primaryOutput: A two-item array describing where to send the
#                modified data. 
#                First item: target segment name
#                Second item: "PrimaryInput" or "AuxInput"
#                AuxInput is rare, but necessary for certain modules.
#
# immediateStart: If true, activate the module immediately (start
#                 reading/writing/accepting/processing data).
#
# MTU: The maximum number of bytes that a segment will transmit.
#      Some modules must override this with a derived value.
#
# MRU: The maximum number of bytes that a segment can receive.
#      Some modules must override this with a derived value.
# =================================================================
Channels:
{
  # autoAdd: A list of channels to automatically initialize.
  autoAdd = [ "chan_AOS_RX_to_file" ];

  chan_AOS_RX_to_file: # channel name
  {
    # segments: A list of segments to insert into the channel.
    #
    # ORDER IN THIS LIST IS CRITICAL!
    #
    # Segments are inserted in the order specified here,
    # typically the *reverse* of the direction of traffic flow -
    # transmitting segments should be specified first, so that
    # those farther upstream can specify them as output
    # targets. Further, it would be unwise to begin receiving
    # data before the entire channel is defined.
    # 
    # The segment *sections* below do not have to be in order
    # (though it improves readability) - just this list.
    segments = [ "fileWrite", "bpduDel", "vcRcv", "afRcv", "ethDel", "ethRX" ];
    
    # AOS_PhysicalChannel Section: All AOS-related segments in this
    # channel refer to this section for values that apply to the
    # entire Physical Channel.
    AOS_PhysicalChannel:
    {
      # The size of every AOS Transfer Frame in octets.
      frameSize = 250;

      # Whether to perform/reserve space for error control in the
      # header (EC is not developed yet but the space will be
      # reserved.
      useHeaderErrorControl = false;

      # Whether to perform/reserve space for error control for
      # the entire frame.
      useFrameErrorControl = false;

      # Whether to use/save space for the Insert Zone.
      useInsertZone = false;

      # The length of the Insert Zone in bytes.
      insertZoneSize = 0;

      # Whether to use the Pink Sheets draft of the AOS
      # recommendation (includes FSH, MC Insert Zone, MC_OCF).
      useDraftRecommendation = false;
    };

    fileWrite: { # segment name
      dllName = "modFdTransmitter";
      deviceName = "file0";
      highWaterMark = 16777216;
      lowWaterMark = 12582912;
      immediateStart = true;
    };

    bpduDel: { # segment name
      dllName = "modAOS_B_PDU_Remove";
      highWaterMark = 16777216;
      lowWaterMark = 12582912;
      primaryOutput = [ "fileWrite", "PrimaryInput" ];
      immediateStart = true;
    };

    vcRcv: { # segment name
      dllName = "modAOS_VC_Rcv";
      highWaterMark = 16777216;
      lowWaterMark = 12582912;
      primaryOutput = [ "bpduDel", "PrimaryInput" ];
      immediateStart = true;

      # The spacecraft identifer (forms the master channel ID).
      SCID = 0xAB;

      # The virtual channel identifier.
      VCID = 0x1;

      # The type of packet to expect, either "Multiplexing" or "Bitstream".
      serviceType = "Bitstream";

      # If error control is enabled, whether it should be performed here.
      # (technically it should only be done in the All Frames service).
      performErrorControlHere = false;

      # Whether to allocate space for and use the OCF.
      useOperationalControl = false;

      # Whether to count the number of times the frame counter flips.
      useVCFrameCycle = false;

      # Whether to use the frame secondary header (pink sheets only).
      useFSH = false;

      # The size of the FSH in octets, if it is fixed.
      fshFixedSize = 0;
    };
    
    afRcv: { # segment name
      dllName = "modAOS_AF_Rcv";
      highWaterMark = 16777216;
      lowWaterMark = 12582912;
      primaryOutput = [ "vcRcv", "PrimaryInput" ];
      immediateStart = true;

      # If error control is enabled, whether it should be performed here.
      # (technically should always be true).
      performErrorControlHere = true;
    };

    ethDel: { # segment name
      dllName = "modEthFrame_Remove";
      highWaterMark = 16777216;
      lowWaterMark = 12582912;
      primaryOutput = [ "afRcv", "PrimaryInput" ];
      immediateStart = true;
    };

    ethRX: { # segment name
      dllName = "modEthReceiver";
      deviceName = "eth2";
      highWaterMark = 16777216;
      lowWaterMark = 12582912;
      primaryOutput = [ "ethDel", "PrimaryInput" ];
      immediateStart = true;
    };
  };
};
