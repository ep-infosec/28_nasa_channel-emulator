# =================================================================
# File: Oct-2011-Demo.cfg
# Author: Tad Kollar ()
# $Rev: 1069 $
# $Date: 2010-05-07 09:37:44 -0400 (Fri, 07 May 2010) $
#
# ***** FORWARD LINK *****
# Description:
#  1. Reads from two input files and one UDP socket.
#  2. Inserts that data into B_PDUs/AOS Transfer Frames.
#  3. Multiplexes the virtual channels and adds a frame CRC.
#  4. Adds an ASM.
#  5. Sends out via UDP.
#
# Customizations required:
# - Two filenames in the Devices section.
# - Target IP address and UDP port.
# ************************
#
# ***** RETURN LINK ******
# Description:
#  1. Receives a TCP data stream.
#  2. Removes ASMs.
#  3. Checks AOS Transfer Frame CRC.
#  4. De-multiplexes the virtual channels.
#  5. Removes Transfer Frame and B_PDU headers.
#  6. Writes data from each of the 3 VCs to files.
#
# Customizations required:
# - Two filenames in the Devices section.
# - Target IP address TCP port.
# ************************
# =================================================================

# =================================================================
# SERVER SECTION
#
# Information applicable either to the administrative
# threads or globablly to all modules.
# =================================================================
Server: 
{
  # debugLevel:
  # 8: (Debug) Very verbose. Will describe every call, every event,
  #    and every data unit that every module handles. Must be
  #    enabled at compile time with -DDEFINE_DEBUG=1 or it will be
  #    no more verbose than 7.
  # 7: (Informative) Describes significant events in addition to
  #     notices, warnings, and errors. Fine for most usage.
  # 6: (Notices) Allows only notices (describe that something
  #    unusual has happened but wasn't necessarily bad) and higher.
  # 5: (Warnings) Allows only warnings (something bad happened but
  #    not fatal) and higher.
  # 4: (Errors) Displays only errors (something bad happened that 
  #    may have result in a loss of functionality) and higher.
  # 0-3: Any one of these effectively disables all output because
  #    messages of higher level than "error" are not used.
  debugLevel = 7;

  # logFile: Path/file to dump output to.
  logFile = "/var/log/ce_admind.log";

  # foreground: true prevents the process from daemonizing and
  # output to the terminal; false causes it to fork into the
  # background and log to the configured file.
  foreground = false;

  # dllPath: The location of the CE modules (modXYZ.so files)
  dllPath = "/usr/lib/ctsce-modules";

  # The number of threads to spawn to handle events.
  reactorThreads = 8;

  # Configure the internal web server
  HTTP : 
  {
    # Where the web server files can be found
    documentRoot = "/var/lib/CE/www";

    # XML-RPC requests must use this path in their URL
    xmlrpcPath = "/RPC2";

    # Set to 127.0.0.1 to restrict all requests to localhost.
    address = "0.0.0.0";

    # TCP port to listen on
    port = 8080;
  };
};

# =================================================================
# DEVICES SECTION
#
# A device in the CE context is an I/O endpoint. Individual
# devices are described here as well as common settings.
#
# Any name changes here must be reflected in the Channels section
# below or the CE will fail to start!
# =================================================================
Devices:
{
  FileDevice_Common:
  {
    # Where all input and output files will be found
    IOpath = "/home/cts/ctsce";
  };

  fwdFile1:
  {
    devType = "File";
    fileName = "source1.dat";
    isInput = true;
    leftSide = true;
  };

  fwdFile2:
  {
    devType = "File";
    fileName = "source2.dat";
    isInput = true;
    leftSide = true;
  };

  fwdUdp1:
  {
    devType = "Udp4";
    address = "10.55.215.52"; # Source address of CE box iface, not dest!
    port = 49122; # Source port of CE box iface, not dest!
    leftSide = true;
  };

  fwdUdpTx:
  {
    devType = "Udp4";
    address = "0.0.0.0"; # Receive on this address
    port = 49123; # Receive on this port
    leftSide = false;
  };

  retTcpRx :
  {
    devType = "Tcp4Client";
    address = "10.55.215.11";
    port = 21055;
    leftSide = true;
  };

  retFile1:
  {
    devType = "File";
    fileName = "sink1.dat";
    isInput = false;
    leftSide = false;
  };

  retFile2:
  {
    devType = "File";
    fileName = "sink2.dat";
    isInput = false;
    leftSide = false;
  };

  retFile3:
  {
    devType = "File";
    fileName = "sink3.dat";
    isInput = false;
    leftSide = false;
  };
};

# =================================================================
# CHANNELS SECTION
#
# A "channel" to the CE is really only a namespace to group
# modular segments into. A channel can have an arbitrary number
# of inputs and outputs (at least one of each is required to
# function).
#
# There may be settings global to each channel, but that is
# mostly determined by the modules, with "segments" being the
# one exception.
#
# A "segment" here is an instance of an object provided by
# module. Segments typically have one primary input and one primary
# output, Mux/demux segments have an arbitrary number of one or the
# other. Some segments also support exactly one aux input and/or
# output, typically used to receive/send data from/to outside the
# primary data stream.
# =================================================================
# COMMON SEGMENT OPTIONS
#
# Not all options are used by all modules. Specialized options are
# described within their sections, below.
#
# dllName: The DLL to load (minus the .so suffix), before continuing.
#
# deviceName: An associated device, must be in the Devices section
#             (only used by Receive/Transmit-type module segments).
#
# highWaterMark: Number of bytes the message queue may contain before
#                blocking new data. This is the primary control used
#                to prevent excessive memory allocation.
#
# lowWaterMark: After hitting the highWaterMark, the number of bytes
#               the message queue must shrink to before accepting
#               data again. Can be the same as highWaterMark if desired.
#
# primaryOutput: A two-item array describing where to send the
#                modified data. 
#                First item: target segment name
#                Second item: "PrimaryInput" or "AuxInput"
#                AuxInput is rare, but necessary for certain modules.
#
# immediateStart: If true, activate the module immediately (start
#                 reading/writing/accepting/processing data).
#
# MTU: The maximum number of bytes that a segment will transmit.
#      Some modules must override this with a derived value.
#
# MRU: The maximum number of bytes that a segment can receive.
#      Some modules must override this with a derived value.
# =================================================================
Channels:
{

  chAosForward: # channel name
  {
    # AOS_PhysicalChannel Section: All AOS-related segments in this
    # channel refer to this section for values that apply to the
    # entire Physical Channel.
    AOS_PhysicalChannel:
    {
      # The size of every AOS Transfer Frame in octets.
      frameSize = 256;

      # Whether to perform/reserve space for error control in the
      # header (EC is not developed yet but the space will be
      # reserved.
      useHeaderErrorControl = false;

      # Whether to perform/reserve space for error control for
      # the entire frame.
      useFrameErrorControl = true;

      # Whether to use/save space for the Insert Zone.
      useInsertZone = false;

      # The length of the Insert Zone in bytes.
      insertZoneSize = 0;

      # Whether to use the Pink Sheets draft of the AOS
      # recommendation (includes FSH, MC Insert Zone, MC_OCF).
      useDraftRecommendation = false;
    };

    udpSend: { # segment name
      dllName = "modUdp4Transmitter";
      deviceName = "fwdUdpTx";
      immediateStart = true;

      # CHANGE TO BRIAN'S DEVICE IP/PORT!
      destAddress = "10.55.215.11";
      destPort = 55000;
    };

#    asmAdd: {
#      dllName = "modASM_Add";
#      primaryOutput = [ "udpSend", "PrimaryInput" ];
#      markerPattern = [ 0x1A, 0xCF, 0xFC, 0x1D ];
#      immediateStart = true;
#      autoLoad = false;
#    };

    afGen: { # segment name
      dllName = "modAOS_AF_Gen";
      primaryOutput = [ "udpSend", "PrimaryInput" ];
      immediateStart = true;

      # If error control is enabled, whether it should be performed here.
      # (technically should always be true).
      performErrorControlHere = true;
    };

    vcMux: { # segment name
      dllName = "modAOS_VC_Mux";
      primaryOutput = [ "afGen", "PrimaryInput" ];
      immediateStart = true;
      SCID = 0x1;
    };

    vcGen1: { # segment name
      dllName = "modAOS_VC_Gen";
      primaryOutput = [ "vcMux", "PrimaryInput" ];
      immediateStart = true;

      # The spacecraft identifer (forms the master channel ID).
      SCID = 0x1;

      # The virtual channel identifier.
      VCID = 0x1;

      # The type of packet to expect, either "Multiplexing" or "Bitstream".
      serviceType = "Bitstream";

      # If error control is enabled, whether it should be performed here.
      # (technically it should only be done in the All Frames service).
      performErrorControlHere = false;

      # Whether to allocate space for and use the OCF.
      useOperationalControl = false;

      # Whether to count the number of times the frame counter flips.
      useVCFrameCycle = false;

      # Whether to use the frame secondary header (pink sheets only).
      useFSH = false;

      # The size of the FSH in octets, if it is fixed.
      fshFixedSize = 0;
    };

    bpduAdd1: { # segment name
      dllName = "modAOS_B_PDU_Add";
      primaryOutput = [ "vcGen1", "PrimaryInput" ];
      immediateStart = true;
    };

    reader1: { # segment name
      dllName = "modFdReceiver";
      deviceName = "fwdFile1";
      primaryOutput = [ "bpduAdd1", "PrimaryInput" ];
      MRU = 16384;
      repeatMax = 1000000;
      immediateStart = true;
    };


    vcGen2: { # segment name
      dllName = "modAOS_VC_Gen";
      primaryOutput = [ "vcMux", "PrimaryInput" ];
      immediateStart = true;

      # The spacecraft identifer (forms the master channel ID).
      SCID = 0x1;

      # The virtual channel identifier.
      VCID = 0x2;

      # The type of packet to expect, either "Multiplexing" or "Bitstream".
      serviceType = "Bitstream";

      # If error control is enabled, whether it should be performed here.
      # (technically it should only be done in the All Frames service).
      performErrorControlHere = false;

      # Whether to allocate space for and use the OCF.
      useOperationalControl = false;

      # Whether to count the number of times the frame counter flips.
      useVCFrameCycle = false;

      # Whether to use the frame secondary header (pink sheets only).
      useFSH = false;

      # The size of the FSH in octets, if it is fixed.
      fshFixedSize = 0;
    };

    bpduAdd2: { # segment name
      dllName = "modAOS_B_PDU_Add";
      primaryOutput = [ "vcGen2", "PrimaryInput" ];
      immediateStart = true;
    };

    reader2: { # segment name
      dllName = "modFdReceiver";
      deviceName = "fwdFile2";
      primaryOutput = [ "bpduAdd2", "PrimaryInput" ];
      MRU = 16384;
      repeatMax = 1000000;
      immediateStart = true;
    };

    vcGen3: { # segment name
      dllName = "modAOS_VC_Gen";
      primaryOutput = [ "vcMux", "PrimaryInput" ];
      immediateStart = true;

      # The spacecraft identifer (forms the master channel ID).
      SCID = 0x1;

      # The virtual channel identifier.
      VCID = 0x3;

      # The type of packet to expect, either "Multiplexing" or "Bitstream".
      serviceType = "Bitstream";

      # If error control is enabled, whether it should be performed here.
      # (technically it should only be done in the All Frames service).
      performErrorControlHere = false;

      # Whether to allocate space for and use the OCF.
      useOperationalControl = false;

      # Whether to count the number of times the frame counter flips.
      useVCFrameCycle = false;

      # Whether to use the frame secondary header (pink sheets only).
      useFSH = false;

      # The size of the FSH in octets, if it is fixed.
      fshFixedSize = 0;
    };

    bpduAdd3: { # segment name
      dllName = "modAOS_B_PDU_Add";
      primaryOutput = [ "vcGen3", "PrimaryInput" ];
      immediateStart = true;
    };

    reader3: { # segment name
      dllName = "modUdp4Receiver";
      deviceName = "fwdUdp1";
      primaryOutput = [ "bpduAdd3", "PrimaryInput" ];
      MRU = 16384;
      receiveMax = false;
      immediateStart = true;
    };

  }; # END chAosForward


  chAosReturn: # channel name
  {
    # AOS_PhysicalChannel Section: All AOS-related segments in this
    # channel refer to this section for values that apply to the
    # entire Physical Channel.
    AOS_PhysicalChannel:
    {
      # The size of every AOS Transfer Frame in octets.
      frameSize = 256;

      # Whether to perform/reserve space for error control in the
      # header (EC is not developed yet but the space will be
      # reserved.
      useHeaderErrorControl = false;

      # Whether to perform/reserve space for error control for
      # the entire frame.
      useFrameErrorControl = true;

      # Whether to use/save space for the Insert Zone.
      useInsertZone = false;

      # The length of the Insert Zone in bytes.
      insertZoneSize = 0;

      # Whether to use the Pink Sheets draft of the AOS
      # recommendation (includes FSH, MC Insert Zone, MC_OCF).
      useDraftRecommendation = false;
    };

    writer3: {
      dllName = "modFdTransmitter";
      deviceName = "retFile3";
      immediateStart = true;
    };

    bpduDel3: { # segment name
      dllName = "modAOS_B_PDU_Remove";
      primaryOutput = [ "writer3", "PrimaryInput" ];
      immediateStart = true;
    };

    vcRcv3: { # segment name
      dllName = "modAOS_VC_Rcv";
      primaryOutput = [ "bpduDel3", "PrimaryInput" ];
      immediateStart = true;

      # The spacecraft identifer (forms the master channel ID).
      SCID = 0x1;

      # The virtual channel identifier.
      VCID = 0x3;

      # The type of packet to expect, either "Multiplexing" or "Bitstream".
      serviceType = "Bitstream";

      # If error control is enabled, whether it should be performed here.
      # (technically it should only be done in the All Frames service).
      performErrorControlHere = false;

      # Whether to allocate space for and use the OCF.
      useOperationalControl = false;

      # Whether to count the number of times the frame counter flips.
      useVCFrameCycle = false;

      # Whether to use the frame secondary header (pink sheets only).
      useFSH = false;

      # The size of the FSH in octets, if it is fixed.
      fshFixedSize = 0;
    };

    writer2: {
      dllName = "modFdTransmitter";
      deviceName = "retFile2";
      immediateStart = true;
    };

    bpduDel2: { # segment name
      dllName = "modAOS_B_PDU_Remove";
      primaryOutput = [ "writer2", "PrimaryInput" ];
      immediateStart = true;
    };

    vcRcv2: { # segment name
      dllName = "modAOS_VC_Rcv";
      primaryOutput = [ "bpduDel2", "PrimaryInput" ];
      immediateStart = true;

      # The spacecraft identifer (forms the master channel ID).
      SCID = 0x1;

      # The virtual channel identifier.
      VCID = 0x2;

      # The type of packet to expect, either "Multiplexing" or "Bitstream".
      serviceType = "Bitstream";

      # If error control is enabled, whether it should be performed here.
      # (technically it should only be done in the All Frames service).
      performErrorControlHere = false;

      # Whether to allocate space for and use the OCF.
      useOperationalControl = false;

      # Whether to count the number of times the frame counter flips.
      useVCFrameCycle = false;

      # Whether to use the frame secondary header (pink sheets only).
      useFSH = false;

      # The size of the FSH in octets, if it is fixed.
      fshFixedSize = 0;
    };

    writer1: {
      dllName = "modFdTransmitter";
      deviceName = "retFile1";
      immediateStart = true;
    };

    bpduDel1: { # segment name
      dllName = "modAOS_B_PDU_Remove";
      primaryOutput = [ "writer1", "PrimaryInput" ];
      immediateStart = true;
    };

    vcRcv1: { # segment name
      dllName = "modAOS_VC_Rcv";
      primaryOutput = [ "bpduDel1", "PrimaryInput" ];
      immediateStart = true;

      # The spacecraft identifer (forms the master channel ID).
      SCID = 0x1;

      # The virtual channel identifier.
      VCID = 0x1;

      # The type of packet to expect, either "Multiplexing" or "Bitstream".
      serviceType = "Bitstream";

      # If error control is enabled, whether it should be performed here.
      # (technically it should only be done in the All Frames service).
      performErrorControlHere = false;

      # Whether to allocate space for and use the OCF.
      useOperationalControl = false;

      # Whether to count the number of times the frame counter flips.
      useVCFrameCycle = false;

      # Whether to use the frame secondary header (pink sheets only).
      useFSH = false;

      # The size of the FSH in octets, if it is fixed.
      fshFixedSize = 0;
    };

    vcDemux: {
      dllName = "modAOS_VC_Demux";
      primaryOutputs = ( ( "vcRcv1", "PrimaryInput", 1), ( "vcRcv2", "PrimaryInput", 2), ( "vcRcv3", "PrimaryInput", 3) );
      immediateStart = true;
      SCID = 0x1;
    };

    afRcv: { # segment name
      dllName = "modAOS_AF_Rcv";
      primaryOutput = [ "vcDemux", "PrimaryInput" ];
      immediateStart = true;

      # If error control is enabled, whether it should be performed here.
      # (technically should always be true).
      performErrorControlHere = true;
    };

    asmDel: {
      dllName = "modASM_Remove";
      primaryOutput = [ "afRcv", "PrimaryInput" ];
      expectedUnitLength = 256;
      markerPattern = [ 0x1A, 0xCF, 0xFC, 0x1D ];
      immediateStart = true;
    };

    tcpRcv: {
      dllName = "modTcp4Receiver";
      deviceName = "retTcpRx";
      MRU = 16384;
      receiveMax = false;
      primaryOutput = [ "asmDel", "PrimaryInput" ];
      immediateStart = true;
    };   

  }; # END chAosReturn
};
