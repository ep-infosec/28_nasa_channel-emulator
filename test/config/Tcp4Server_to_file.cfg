# =================================================================
# File: AOS_single_BPDU_VC_TX.cfg
# Author: Tad Kollar ()
# $Rev: 994 $
# $Date: 2010-02-18 15:50:15 -0500 (Thu, 18 Feb 2010) $
#
# Description:
#  Creates a single, transmitting AOS virtual channel by:
#  1. Reading data from a file.
#  2. Putting it into B_PDUs/AOS Transfer Frames.
#  3. Encapsulating in an Ethernet frame with type ID 0xA05.
#  4. Sending it out another Ethernet interface.
#
# This is accomplished with seven modular segments in one channel.
#
# CUSTOMIZATIONS REQUIRED (may not even run otherwise):
# - Output Ethernet interface name (in 3 places); also check
#   the protectedDevices line.
# - srcMac and dstMac in ethAdd section.
# - Source file name and block read ("MRU") size.
# =================================================================

# =================================================================
# SERVER SECTION
#
# Information applicable either to the administrative
# threads or globablly to all modules.
# =================================================================
Server: 
{
  # debugLevel:
  # 8: (Debug) Very verbose. Will describe every call, every event,
  #    and every data unit that every module handles. Must be
  #    enabled at compile time with -DDEFINE_DEBUG=1 or it will be
  #    no more verbose than 7.
  # 7: (Informative) Describes significant events in addition to
  #     notices, warnings, and errors. Fine for most usage.
  # 6: (Notices) Allows only notices (describe that something
  #    unusual has happened but wasn't necessarily bad) and higher.
  # 5: (Warnings) Allows only warnings (something bad happened but
  #    not fatal) and higher.
  # 4: (Errors) Displays only errors (something bad happened that 
  #    may have result in a loss of functionality) and higher.
  # 0-3: Any one of these effectively disables all output because
  #    messages of higher level than "error" are not used.
  debugLevel = 8;

  # logFile: Path/file to dump output to.
  logFile = "./logs/ce-server.log";

  # foreground: true prevents the process from daemonizing and
  # output to the terminal; false causes it to fork into the
  # background and log to the configured file.
  foreground = true;

  # dllPath: The location of the CE modules (modXYZ.so files)
  dllPath = "./modules";

  # abyss section: Describes the Abyss++ HTTP server.
  # NOTE: Abyss++ will be replaced in the near future and
  # this section will be ignored.
  abyss : 
  {
    port = 8080; # TCP port to listen on for XML-RPC requests
    logFile = "./logs/ce-abyss.log"; # Where to log connections
  };
};

# =================================================================
# DEVICES SECTION
#
# A device in the CE context is an I/O endpoint. Individual
# devices are described here as well as common settings.
#
# Any name changes here must be reflected in the Channels section
# below or the CE will fail to start!
# =================================================================
Devices:
{
  # autoLoad: Which devices to activate at start time. Each MUST
  # have its own description section below.
  autoLoad = [ "tcp0", "file0" ];

  FileDevice_Common : 
  {
    # IOpath: The "root" directory for data files, in lieu of "/".
    # All files manageded by File Devices are under this directory.
    IOpath = "./fileIO";
  };

  tcp0 :
  {
    devType = "Tcp4Server";
    address = "127.0.0.1";
    port = 6750;
  };

  file0 : 
  {
    devType = "File"; # Must be "File" or the wrong type of object will be created.
    fileName = "output.bin"; # Name without path (use FileDevice_Common.IOpath for that).
    isInput = false; # True if the file will read from; false if written to.
  };
};

# =================================================================
# CHANNELS SECTION
#
# A "channel" to the CE is really only a namespace to group
# modular segments into. A channel can have an arbitrary number
# of inputs and outputs (at least one of each is required to
# function).
#
# There may be settings global to each channel, but that is
# mostly determined by the modules, with "segments" being the
# one exception.
#
# A "segment" here is an instance of an object provided by
# module. Segments typically have one primary input and one primary
# output, Mux/demux segments have an arbitrary number of one or the
# other. Some segments also support exactly one aux input and/or
# output, typically used to receive/send data from/to outside the
# primary data stream.
# =================================================================
# COMMON SEGMENT OPTIONS
#
# Not all options are used by all modules. Specialized options are
# described within their sections, below.
#
# dllName: The DLL to load (minus the .so suffix), before continuing.
#
# deviceName: An associated device, must be in the Devices section
#             (only used by Receive/Transmit-type module segments).
#
# highWaterMark: Number of bytes the message queue may contain before
#                blocking new data. This is the primary control used
#                to prevent excessive memory allocation.
#
# lowWaterMark: After hitting the highWaterMark, the number of bytes
#               the message queue must shrink to before accepting
#               data again. Can be the same as highWaterMark if desired.
#
# primaryOutput: A two-item array describing where to send the
#                modified data. 
#                First item: target segment name
#                Second item: "PrimaryInput" or "AuxInput"
#                AuxInput is rare, but necessary for certain modules.
#
# immediateStart: If true, activate the module immediately (start
#                 reading/writing/accepting/processing data).
#
# MTU: The maximum number of bytes that a segment will transmit.
#      Some modules must override this with a derived value.
#
# MRU: The maximum number of bytes that a segment can receive.
#      Some modules must override this with a derived value.
# =================================================================
Channels:
{
  # autoAdd: A list of channels to automatically initialize.
  autoAdd = [ "chanTcpTest" ];

  chanTcpTest: # channel name
  {
    # segments: A list of segments to insert into the channel.
    #
    # ORDER IN THIS LIST IS CRITICAL!
    #
    # Segments are inserted in the order specified here,
    # typically the *reverse* of the direction of traffic flow -
    # transmitting segments should be specified first, so that
    # segments farther upstream can specify them as output
    # targets. Further, it would be unwise to begin receiving
    # data before the entire channel is defined.
    # 
    # The segment *sections* below do not have to be in order
    # (though it improves readability) - just this list.
    segments = [ "fileWrite", "tcp4Rcv" ];

    fileWrite: { # segment name
      dllName = "modFdTransmitter";
      deviceName = "file0";
      immediateStart = true;
    };

    tcp4Rcv: { # segment name
      dllName = "modTcp4Receiver";
      deviceName = "tcp0";
      primaryOutput = [ "fileWrite", "PrimaryInput" ];
      immediateStart = true;
      MRU = 1024;
    };
  };
};
